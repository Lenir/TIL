/*
 * Be_aware_of_autoGenerated_methods_by_Compiler.cpp
 *
 *  Created on: 2018. 2. 14.
 *      Author: Ciel
 */

#include "Be_aware_of_autoGenerated_methods_by_Compiler.hpp"

using namespace std;

template <typename T>
class ClassWithImplicitGenerator{
public:
	ClassWithImplicitGenerator(const string& _name, const T& _data, const T& _constData) : name(_name), data(_data), constData(_constData) {}

	// No explicit copy constructor!

	friend ostream& operator<< (ostream& os, const ClassWithImplicitGenerator& target){
		os << "< "<< target.name << " | data : " << target.data << " constData : " << target.constData <<  " >" << endl;
		return os;
	}

private:
	string name;
	T data;
	const T constData;
};

template <typename T>
class ClassWithExplicitGenerator{
public:
	ClassWithExplicitGenerator(const string& _name, const T& _data, const T& _constData) : name(_name), data(_data), constData(_constData) {}

	ClassWithExplicitGenerator& operator=(const ClassWithExplicitGenerator& sample){
		ClassWithExplicitGenerator copies(sample.name, sample.data, sample.constData);
		return copies;
	}

	friend ostream& operator<< (ostream& os, const ClassWithExplicitGenerator& target){
		os << "< "<< target.name << " | data : " << target.data << " constData : " << target.constData << " >" << endl;
		return os;
	}

private:
	string name;
	T data;
	const T constData;
};

int main(){
	ClassWithExplicitGenerator<int> exp1("exp1", 1, 1);
	ClassWithExplicitGenerator<int> exp2("exp2", 2, 2);

	cout << "< Before call Copy-Constructor >" << endl;
	cout << exp1 << exp2;
	cout << "< After call Copy-Constructor >" << endl;
	exp2 = exp1; // useless
	cout << exp1 << exp2;

	ClassWithImplicitGenerator<int> imp1("imp1", 1, 1);
	ClassWithImplicitGenerator<int> imp2("imp2", 2, 2);

//	imp2 = imp1;
	// occurs error!

	cout << imp1 << imp2;
}
